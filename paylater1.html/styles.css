```css
/* Base Styles */
:root {
  --primary-color: #007bff;
  --secondary-color: #f2f2f2;
  --text-color: #333333;
  --spacing: 15px;
}

body {
  font-family: Arial, sans-serif;
  background-color: var(--secondary-color);
  margin: 0;
  padding: 0;
  line-height: 1.6;
}

/* Layout */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--spacing);
}

/* Sections */
.section {
  margin-bottom: var(--spacing);
}

/* Buttons */
.button {
  background-color: var(--primary-color);
  color: white;
  padding: var(--spacing) 2 * var(--spacing);
  text-decoration: none;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease; /* Smooth transition for hover effect */
}

.button:hover {
  background-color: darken(var(--primary-color), 5%); /* Darken color on hover */
}

.button:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.5); /* Add a focus ring */
}


/* Responsive Design */
@media (max-width: 768px) {
  .container {
    padding: var(--spacing) 0.5 * var(--spacing);
  }
}

/* Helper function to darken a color (can be implemented using a CSS preprocessor like Sass or Less, or a JavaScript solution if needed) */
/* This is a placeholder, a real implementation would involve more complex color manipulation */
/* You would likely use a CSS preprocessor for this */
.darken(@color, @amount) {
  /* Placeholder - replace with actual color manipulation logic */
  return lighten(@color, @amount * -1);
}


```

**Explanation:**

*   **Base Styles:** Sets up basic styles like font family, background color, and spacing variables using CSS Custom Properties (variables).
*   **Layout:**  Defines a container for the main content, ensuring responsive behavior with a max-width and auto margins.  Uses the `--spacing` variable for consistent padding.  Sections are defined with a bottom margin for separation.
*   **Buttons:**  Styles a button with the primary color, hover and focus effects, and smooth transitions.
*   **Responsive Design:** Includes a media query for smaller screens (768px), adjusting the container padding to ensure appropriate layout.
*   **BEM (Block, Element, Modifier):** The CSS follows a BEM-like structure, although it's simplified due to the limited context.  More complex UIs would benefit from a more rigorous application of BEM.  For example, `button` is a block, and potential modifiers could be added (e.g., `.button--primary`, `.button--secondary`).
*   **Darken Helper:**  The `darken` helper function is a placeholder. To implement it correctly, you would typically use a CSS preprocessor (like Sass or Less) or a JavaScript solution during build time.  This function helps maintain a consistent color scheme and is good practice for avoiding hardcoded values.


This CSS provides a solid foundation. For a real-world application, you would expand upon these styles to incorporate all UI elements and customize further based on the detailed design specifications.  Remember to replace the placeholder `darken` function with a proper implementation.
